# Docs for the Azure Web Apps Deploy action: https://github.com/azure/functions-action
# More GitHub Actions for Azure: https://github.com/Azure/actions
# More info on Python, GitHub Actions, and Azure Functions: https://aka.ms/python-webapps-actions

name: Build and deploy Python project to Azure Function App - emos-functions-v2

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  AZURE_FUNCTIONAPP_PACKAGE_PATH: 'TriggerPrediction' # Matches the actual directory
  PYTHON_VERSION: '3.10' # Matches the runtime

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read # Required for actions/checkout

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Python version
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Purge pip cache
        run: pip cache purge

      - name: Install dependencies
        run: |
          echo "Current directory: $(pwd)"
          ls -la
          if [ -d "${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}" ]; then
            cd ${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}
            echo "Changed to directory: $(pwd)"
            if [ -f "../requirements.txt" ]; then
              echo "Found requirements.txt in root with content:"
              cat ../requirements.txt
              python -m pip install --upgrade pip
              echo "Installing dependencies..."
              pip install --no-cache-dir -r ../requirements.txt --target=".python_packages/lib/site-packages" --platform manylinux2014_x86_64 --only-binary=:all: || {
                echo "Error: Failed to install dependencies. Check the requirements.txt file or pip logs."
                exit 1
              }
              pip check
              pip list
            else
              echo "Error: requirements.txt not found in root directory!"
              exit 1
            fi
          else
            echo "Error: Directory ${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }} not found!"
            exit 1
          fi

      - name: Zip artifact for deployment
        run: |
          if [ -d "${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}" ]; then
            cd ${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}
            zip -r ../release.zip . -x "*.pyc" "*/__pycache__/*" "venv/*"
          else
            echo "Error: Directory ${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }} not found!"
            exit 1
          fi

      - name: Upload artifact for deployment job
        run: |
          cd ..
          echo "Uploading from directory: $(pwd)"
          ls -la
          if [ -f "release.zip" ]; then
            actions/upload-artifact@v4
            with:
              name: python-app
              path: release.zip
              if-no-files-found: error
          else
            echo "Error: release.zip not found!"
            exit 1
          fi
        uses: actions/upload-artifact@v4

  deploy:
    runs-on: ubuntu-latest
    needs: build
    permissions:
      id-token: write # Required for OIDC authentication
      contents: read # Required for actions/checkout

    steps:
      - name: Download artifact from build job
        uses: actions/download-artifact@v4
        with:
          name: python-app
          path: /tmp/deploy-package

      - name: Unzip artifact for deployment
        run: unzip /tmp/deploy-package/release.zip -d ${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}

      - name: Debug secrets
        run: |
          echo "Client ID: ${{ secrets.AZURE_CLIENT_ID }}"
          echo "Tenant ID: ${{ secrets.AZURE_TENANT_ID }}"
          echo "Subscription ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}"
          if [ -z "${{ secrets.AZURE_CLIENT_ID }}" ] || [ -z "${{ secrets.AZURE_TENANT_ID }}" ]; then
            echo "Error: One or more Azure secrets are missing or empty!"
            exit 1
          fi

      - name: Azure CLI login with OIDC
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          enable-AzPSSession: true # Optional, for PowerShell compatibility
        continue-on-error: false

      - name: 'Deploy to Azure Functions'
        uses: Azure/functions-action@v1
        id: deploy-to-function
        with:
          app-name: 'emos-functions-v2'
          slot-name: 'Production'
          package: ${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}
          publish-profile: '' # Ensure no publish profile interferes

      - name: Logout
        run: az logout
        if: always()
